{"version":3,"sources":["../node_modules/event-target-shim/dist/event-target-shim.mjs","../../node_modules/@bikeshaving/crank/dom.js","index.ts","utility.ts","Observable.ts","Queue.ts","../../node_modules/web-utility/source/data.ts","../../node_modules/web-utility/source/DOM.ts","../../node_modules/web-utility/source/URL.ts","../../source/History.ts","../../node_modules/web-utility/source/event.ts","../../node_modules/web-utility/source/animation.ts","../../source/utility.ts","../../source/Router.tsx","../../source/index.ts","Page.tsx","index.tsx"],"names":[],"mappings":"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","file":"source.37de533e.js","sourceRoot":"../../test/source","sourcesContent":["/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap();\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap();\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event);\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    );\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            );\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    });\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true });\n\n    // Define accessors\n    const keys = Object.keys(event);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this));\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype);\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event);\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value;\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    });\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            );\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nfunction wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nfunction isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nfunction setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nfunction setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nfunction setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap();\n\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next;\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n\n                node = node.next;\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    );\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        };\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node;\n            node = node.next;\n        }\n\n        // Add it.\n        prev.next = newNode;\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this);\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n\n        let prev = null;\n        let node = listeners.get(eventName);\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return\n            }\n\n            prev = node;\n            node = node.next;\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            );\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err);\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent);\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n\n        return !wrappedEvent.defaultPrevented\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);\n}\n\nexport default EventTarget;\nexport { defineEventAttribute, EventTarget };\n//# sourceMappingURL=event-target-shim.mjs.map\n","export * from \"./esm/dom.js\";\n","export * from './utility';\nexport * from './Observable';\nexport * from './Queue';\n","export interface Defer<T = any> {\n    promise: Promise<T>;\n    resolve: (data?: T) => void;\n    reject: (error: Error | string) => void;\n}\n\nexport function makeDefer<T>(): Defer<T> {\n    var resolve: Defer<T>['resolve'], reject: Defer<T>['reject'];\n\n    const promise = new Promise<T>(\n        (done, error) => ((resolve = done), (reject = error))\n    );\n\n    return { resolve, reject, promise };\n}\n\nexport type EventHandler = (data: any) => void;\n\nexport interface EventTrigger {\n    addEventListener?(name: string, handler: EventHandler): void;\n    removeEventListener?(name: string, handler: EventHandler): void;\n    on?(name: string, handler: EventHandler): this;\n    off?(name: string, handler: EventHandler): this;\n}\n","import { Defer, makeDefer, EventTrigger } from './utility';\n\nif (!Symbol.observable) Symbol.observable = Symbol('observable');\n\nexport interface Observer<T = any> {\n    next(value: T): void;\n    error(reason: string | Error): void;\n    complete(): void;\n}\n\nexport interface Subscription {\n    unsubscribe(): void;\n    readonly closed: boolean;\n}\n\nexport interface Subscribable<T = any> {\n    [Symbol.observable](): Subscribable<T>;\n    subscribe(\n        onNext: Observer<T>['next'],\n        onError?: Observer<T>['error'],\n        onComplete?: Observer<T>['complete']\n    ): Subscription;\n}\n\nexport type SubscriberFunction<T = any> = (\n    observer: Observer<T>\n) => (() => void) | void;\n\nexport class Observable<T = any> implements Subscribable {\n    private subscriber: SubscriberFunction<T>;\n\n    constructor(subscriber: SubscriberFunction<T>) {\n        this.subscriber = subscriber;\n    }\n\n    [Symbol.observable]() {\n        return this;\n    }\n\n    async *[Symbol.asyncIterator]() {\n        var queue: Defer<T>[] = [makeDefer<T>()],\n            canceler: (() => void) | void,\n            done = false;\n\n        const observer: Observer<T> = {\n            next(value) {\n                if (done) return;\n\n                queue[queue.length - 1].resolve(value);\n\n                queue.push(makeDefer());\n            },\n            error(reason) {\n                if (!done)\n                    queue[queue.length - 1].reject(reason), (done = true);\n\n                if (canceler) canceler();\n            },\n            complete() {\n                if (!done) queue[queue.length - 1].resolve(), (done = true);\n\n                if (canceler) canceler();\n            }\n        };\n\n        canceler = this.subscriber(observer);\n\n        do {\n            yield queue[0].promise;\n\n            queue.shift();\n        } while (queue[0]);\n    }\n\n    static of<T = any>(...items: T[]) {\n        return new this<T>(({ next, complete }) => {\n            for (const item of items) next(item);\n\n            complete();\n        });\n    }\n\n    async toPromise() {\n        const stack = [];\n\n        for await (const item of this) {\n            stack.push(item);\n\n            if (stack.length > 2) stack.shift();\n        }\n\n        return stack[0];\n    }\n\n    subscribe(\n        onNext: Observer<T>['next'],\n        onError?: Observer<T>['error'],\n        onComplete?: Observer<T>['complete']\n    ) {\n        var stop = false;\n\n        (async () => {\n            try {\n                for await (const item of this)\n                    if (!stop) onNext(item);\n                    else break;\n\n                if (onComplete instanceof Function) onComplete();\n            } catch (error) {\n                if (onError instanceof Function) onError(error);\n            }\n        })();\n\n        return {\n            unsubscribe() {\n                stop = true;\n            },\n            get closed() {\n                return stop;\n            }\n        };\n    }\n\n    static from<T = any>(observable: Subscribable<T>) {\n        return new this<T>(\n            ({ next, error, complete }) =>\n                observable.subscribe(next, error, complete).unsubscribe\n        );\n    }\n\n    static fromEvent<T = any>(target: EventTrigger, name: string) {\n        return new this<T>(({ next, error }) => {\n            if (typeof target.on === 'function')\n                target.on(name, next).on('error', error);\n            else {\n                target.addEventListener(name, next);\n                target.addEventListener('error', error);\n            }\n\n            return () => {\n                if (typeof target.off === 'function')\n                    target.off(name, next).off('error', error);\n                else {\n                    target.removeEventListener(name, next);\n                    target.removeEventListener('error', error);\n                }\n            };\n        });\n    }\n}\n","import { Observer, Observable } from './Observable';\nimport { makeDefer, Defer } from './utility';\n\nexport function createQueue<D = any>() {\n    type Data = { defer: Defer; data: D };\n\n    var feedNext: Observer<Data>['next'], stop: Observer<Data>['complete'];\n\n    const observable = new Observable<Data>(({ next, complete }) => {\n        (feedNext = next), (stop = complete);\n    });\n\n    return {\n        process<R = any>(data: D) {\n            const defer = makeDefer<R>();\n\n            if (!feedNext)\n                throw Error(\"Can't process data before Queue consuming\");\n\n            feedNext({ defer, data });\n\n            return defer.promise;\n        },\n        destroy() {\n            if (!stop) throw Error(\"Can't stop a Queue before Queue consuming\");\n\n            stop();\n        },\n        observable\n    };\n}\n","export function isEmpty(value: any) {\n    return !(value != null) || (!value && isNaN(value)) || value + '' === '';\n}\n\nexport function uniqueID() {\n    return (Date.now() + parseInt((Math.random() + '').slice(2))).toString(36);\n}\n\nexport function differ(target: object, source: object) {\n    const data = {};\n\n    for (const key in source)\n        if (!(target[key] != null)) data[key] = source[key];\n\n    return data;\n}\n\nexport type GroupKey = string | number;\nexport type Iteratee<T> = GroupKey | ((item: T) => GroupKey | GroupKey[]);\n\nexport function groupBy<T>(list: T[], iteratee: Iteratee<T>) {\n    const data: Record<string | number, T[]> = {};\n\n    for (const item of list) {\n        let keys: GroupKey | GroupKey[] =\n            iteratee instanceof Function ? iteratee(item) : item[iteratee];\n\n        if (!(keys instanceof Array)) keys = [keys];\n\n        for (const key of new Set<GroupKey>(keys.filter(key => key != null)))\n            (data[key] = data[key] || []).push(item);\n    }\n\n    return data;\n}\n\nexport function parseJSON(value: string) {\n    try {\n        return JSON.parse(value);\n    } catch {\n        return value;\n    }\n}\n\nfunction readQuoteValue(raw: string) {\n    const quote = raw[0];\n    const index = raw.indexOf(quote, 1);\n\n    if (index < 0) throw SyntaxError(`A ${quote} is missing`);\n\n    return raw.slice(1, index);\n}\n\nexport function parseTextTable<T = {}>(\n    raw: string,\n    header?: boolean,\n    separator = ','\n) {\n    const data = raw\n        .trim()\n        .split(/[\\r\\n]+/)\n        .map(row => {\n            const list = [];\n\n            do {\n                let value: string;\n\n                if (row[0] === '\"' || row[0] === \"'\") {\n                    value = readQuoteValue(row);\n\n                    row = row.slice(value.length + 3);\n                } else {\n                    const index = row.indexOf(separator);\n\n                    if (index > -1) {\n                        value = row.slice(0, index);\n\n                        row = row.slice(index + 1);\n                    } else {\n                        value = row;\n\n                        row = '';\n                    }\n                }\n\n                try {\n                    value = value.trim();\n\n                    list.push(JSON.parse(value));\n                } catch (error) {\n                    list.push(value);\n                }\n            } while (row);\n\n            return list;\n        });\n\n    return !header\n        ? data\n        : data.slice(1).map(row =>\n              row.reduce((object, item, index) => {\n                  object[data[0][index]] = item;\n\n                  return object;\n              }, {} as T)\n          );\n}\n","import { URLData } from './URL';\nimport { HTMLField } from './DOM-type';\nimport { parseJSON, isEmpty } from './data';\n\nconst sandbox = document.createElement('template'),\n    fragment = document.createDocumentFragment();\n\nexport function parseDOM(HTML: string) {\n    sandbox.innerHTML = HTML;\n\n    return [...sandbox.content.childNodes].map(node => {\n        node.remove();\n        return node;\n    });\n}\n\nexport function* walkDOM(root: Node): Generator<Node> {\n    const children = [...root.childNodes];\n\n    yield root;\n\n    for (const node of children) yield* walkDOM(node);\n}\n\nexport function insertToCursor(...nodes: Node[]) {\n    fragment.append(...nodes);\n\n    for (const node of walkDOM(fragment))\n        if (\n            ![1, 3, 11].includes(node.nodeType) ||\n            ['meta', 'title', 'link', 'script'].includes(\n                node.nodeName.toLowerCase()\n            )\n        )\n            (node as ChildNode).replaceWith(...node.childNodes);\n\n    const selection = self.getSelection();\n\n    if (!selection) return;\n\n    const range = selection.getRangeAt(0);\n\n    range.deleteContents();\n    range.insertNode(fragment);\n}\n\nexport function scrollTo(selector: string, root?: Element) {\n    const [_, ID] = /^#(.+)/.exec(selector) || [];\n\n    if (ID === 'top') window.scrollTo({ top: 0, left: 0, behavior: 'smooth' });\n    else\n        (root || document)\n            .querySelector(ID ? `[id=\"${ID}\"]` : selector)\n            ?.scrollIntoView({ behavior: 'smooth' });\n}\n\nexport function watchVisible(\n    root: Element,\n    handler: (visible: boolean) => any\n) {\n    var last = document.visibilityState === 'visible' ? 1 : 0;\n\n    function change(state: number) {\n        if (state === 3 || last === 3) handler(state === 3);\n\n        last = state;\n    }\n\n    new IntersectionObserver(([{ isIntersecting }]) =>\n        change(isIntersecting ? last | 2 : last & 1)\n    ).observe(root);\n\n    document.addEventListener('visibilitychange', () =>\n        change(document.visibilityState === 'visible' ? last | 1 : last & 2)\n    );\n}\n\nexport function formToJSON(\n    form: HTMLFormElement | HTMLFieldSetElement\n): URLData {\n    const data = {};\n\n    for (const field of form.elements) {\n        let {\n            tagName,\n            type,\n            name,\n            value: v,\n            checked,\n            defaultValue,\n            selectedOptions\n        } = field as HTMLField;\n\n        if (!name) continue;\n\n        tagName = tagName.toLowerCase();\n\n        const box = tagName !== 'fieldset' && field.closest('fieldset');\n\n        if (box && box !== form) continue;\n\n        if (['radio', 'checkbox'].includes(type))\n            if (checked) v = defaultValue || 'true';\n            else continue;\n\n        let value: any = parseJSON(v);\n\n        switch (tagName) {\n            case 'select':\n                value = Array.from(selectedOptions, ({ value }) =>\n                    parseJSON(value)\n                );\n                break;\n            case 'fieldset':\n                value = formToJSON(field as HTMLFieldSetElement);\n        }\n\n        if (name in data) data[name] = [].concat(data[name], value);\n        else\n            data[name] =\n                !(value instanceof Array) || !isEmpty(value[1])\n                    ? value\n                    : value[0];\n    }\n\n    return data;\n}\n","import { parseJSON, isEmpty } from './data';\n\nexport function isXDomain(URI: string) {\n    return new URL(URI, document.baseURI).origin !== self.location.origin;\n}\n\nexport type JSONValue = number | boolean | string | null;\nexport type URLData = Record<string, JSONValue | JSONValue[]>;\n\nexport function parseURLData(raw = window.location.search): URLData {\n    const data = new URLSearchParams(/(?:\\?|#)?(\\S+)/.exec(raw)[1]);\n\n    return Object.fromEntries(\n        [...data.keys()].map(key => {\n            const list = data.getAll(key).map(parseJSON);\n\n            return [key, list.length < 2 ? list[0] : list];\n        })\n    );\n}\n\nexport function buildURLData(map: string[][] | Record<string, any>) {\n    if (!(map instanceof Array)) map = Object.entries(map);\n\n    return new URLSearchParams(\n        (map as any[][])\n            .map(\n                ([key, value]) =>\n                    !isEmpty(value) && [key, value.toJSON?.() || value + '']\n            )\n            .filter(Boolean)\n    );\n}\n\nconst DataURI = /^data:(.+?\\/(.+?))?(;base64)?,([\\s\\S]+)/;\n\nexport function blobFrom(URI: string) {\n    var [_, type, __, base64, data] = DataURI.exec(URI) || [];\n\n    data = base64 ? self.atob(data) : data;\n\n    const aBuffer = new ArrayBuffer(data.length);\n    const uBuffer = new Uint8Array(aBuffer);\n\n    for (let i = 0; data[i]; i++) uBuffer[i] = data.charCodeAt(i);\n\n    return new Blob([aBuffer], { type });\n}\n","import { createQueue } from 'iterable-observer';\nimport { walkDOM, scrollTo, formToJSON } from 'web-utility/source/DOM';\nimport { buildURLData } from 'web-utility/source/URL';\n\nexport type LinkElement = HTMLAnchorElement | HTMLAreaElement | HTMLFormElement;\n\nexport enum PathPrefix {\n    hash = '#',\n    path = '/'\n}\n\nexport type PathMode = keyof typeof PathPrefix;\n\nconst { location, history } = window;\n\nexport class History {\n    stream = createQueue<string>();\n    paths: string[] = [];\n    prefix: PathPrefix;\n\n    get path() {\n        return location[\n            this.prefix === PathPrefix.hash ? 'hash' : 'pathname'\n        ].slice(1);\n    }\n\n    constructor(mode: PathMode = 'hash') {\n        this.prefix = PathPrefix[mode];\n    }\n\n    [Symbol.asyncIterator]() {\n        return this.stream.observable[Symbol.asyncIterator]();\n    }\n\n    async set(path: string, title = document.title) {\n        if (this.paths.indexOf(path) < 0) this.paths.push(path);\n\n        await this.stream.process(path);\n\n        document.title = title;\n    }\n\n    push(path: string, title = document.title) {\n        history.pushState({ path, title }, title, this.prefix + path);\n\n        return this.set(path, title);\n    }\n\n    replace(path: string, title = document.title) {\n        history.replaceState({ path, title }, title, this.prefix + path);\n\n        return this.set(path, title);\n    }\n\n    compare(last: string, next: string) {\n        for (const path of this.paths)\n            if (last === path) return -1;\n            else if (next === path) return 1;\n\n        return 0;\n    }\n\n    static getInnerPath(link: LinkElement) {\n        const path = link.getAttribute('href') || link.getAttribute('action');\n\n        if (\n            (link.target || '_self') === '_self' &&\n            !path.match(/^\\w+:/) &&\n            (!(link instanceof HTMLFormElement) ||\n                (link.getAttribute('method') || 'get').toLowerCase() === 'get')\n        )\n            return path;\n    }\n\n    static getTitle(root: HTMLElement) {\n        if (root.title) return root.title;\n\n        var title = '';\n\n        for (const node of walkDOM(root))\n            if (node instanceof Text) {\n                const {\n                    width,\n                    height\n                } = node.parentElement.getBoundingClientRect();\n\n                if (width && height) title += node.nodeValue.trim();\n            }\n\n        return title;\n    }\n\n    handleClick = (event: MouseEvent) => {\n        const link = (event.target as HTMLElement).closest<\n            HTMLAnchorElement | HTMLAreaElement\n        >('a[href], area[href]');\n\n        if (!link) return;\n\n        const path = History.getInnerPath(link);\n\n        if (!path) return;\n\n        event.preventDefault();\n\n        if (/^#.+/.test(path))\n            return scrollTo(path, event.currentTarget as Element);\n\n        this.push(path, History.getTitle(link));\n    };\n\n    handleForm = (event: Event) => {\n        const form = event.target as HTMLFormElement;\n        const path = History.getInnerPath(form);\n\n        if (!path) return;\n\n        event.preventDefault();\n\n        this.push(path + '?' + buildURLData(formToJSON(form)), form.title);\n    };\n\n    private popping = false;\n\n    listen(root: Element) {\n        root.addEventListener('click', this.handleClick);\n        root.addEventListener('submit', this.handleForm);\n\n        if (this.prefix === PathPrefix.hash)\n            window.addEventListener(\n                'hashchange',\n                () => this.popping || this.set(this.path)\n            );\n\n        window.addEventListener('popstate', async ({ state }) => {\n            const { path = this.path, title } = state || {};\n\n            this.popping = true;\n\n            await this.set(path, title);\n\n            this.popping = false;\n        });\n\n        setTimeout(() => this.replace(this.path, history.state?.title));\n\n        return this;\n    }\n}\n","import { uniqueID } from './data';\n\nexport function promisify<T extends Event>(scope: string, element: Element) {\n    return new Promise<T>((resolve, reject) => {\n        function end(event: T) {\n            resolve(event), clean();\n        }\n        function cancel(event: T) {\n            reject(event), clean();\n        }\n\n        function clean() {\n            element.removeEventListener(scope + 'end', end);\n            element.removeEventListener(scope + 'cancel', cancel);\n        }\n\n        element.addEventListener(scope + 'end', end);\n        element.addEventListener(scope + 'cancel', cancel);\n    });\n}\n\nexport type MessageGlobal = Window | Worker;\n\nexport function createMessageServer(\n    handlers: Record<string, (data: any) => any | Promise<any>>\n) {\n    async function server({\n        data: { type, id, ...data },\n        source,\n        origin\n    }: MessageEvent) {\n        var result = handlers[type]?.(data);\n\n        if (result instanceof Promise) result = await result;\n\n        (source as MessageGlobal).postMessage({ ...result, id }, origin);\n    }\n\n    self.addEventListener('message', server);\n\n    return () => self.removeEventListener('message', server);\n}\n\nexport function createMessageClient(target: Window | Worker, origin = '*') {\n    return (type: string, data?: any) =>\n        new Promise(resolve => {\n            const UID = uniqueID();\n\n            function handler({ data: { id, ...data } }: MessageEvent) {\n                if (id !== UID) return;\n\n                resolve(data);\n\n                self.removeEventListener('message', handler);\n            }\n\n            self.addEventListener('message', handler);\n\n            target.postMessage({ id: UID, type, ...data }, origin);\n        });\n}\n","import { promisify } from './event';\r\n\r\nexport function durationOf(\r\n    type: 'transition' | 'animation',\r\n    element: HTMLElement\r\n) {\r\n    const { transitionDuration, animationDuration } = getComputedStyle(element);\r\n\r\n    const duration =\r\n        type === 'animation' ? animationDuration : transitionDuration;\r\n\r\n    return parseFloat(duration) * (duration.slice(-2) === 'ms' ? 1 : 1000);\r\n}\r\n\r\nexport function watchMotion<T extends Event>(\r\n    type: 'transition' | 'animation',\r\n    element: HTMLElement\r\n) {\r\n    return Promise.race([\r\n        promisify<T>(type, element).catch(event => Promise.resolve(event)),\r\n        new Promise(resolve => setTimeout(resolve, durationOf(type, element)))\r\n    ]);\r\n}\r\n\r\nfunction fadeIn<T extends Event>(\r\n    type: 'transition' | 'animation',\r\n    element: HTMLElement,\r\n    className: string,\r\n    display: string\r\n) {\r\n    element.style.display = display;\r\n\r\n    const end = watchMotion<T>(type, element);\r\n\r\n    return new Promise<T>(resolve =>\r\n        self.requestAnimationFrame(() => {\r\n            element.classList.add(className);\r\n\r\n            end.then(resolve);\r\n        })\r\n    );\r\n}\r\n\r\nasync function fadeOut<T extends Event>(\r\n    type: 'transition' | 'animation',\r\n    element: HTMLElement,\r\n    className: string,\r\n    remove?: boolean\r\n) {\r\n    const end = watchMotion<T>(type, element);\r\n\r\n    element.classList.remove(className);\r\n\r\n    await end;\r\n\r\n    if (remove) element.remove();\r\n    else element.style.display = 'none';\r\n}\r\n\r\nexport function transitIn(\r\n    element: HTMLElement,\r\n    className: string,\r\n    display = 'block'\r\n) {\r\n    return fadeIn<TransitionEvent>('transition', element, className, display);\r\n}\r\n\r\nexport function animateIn(\r\n    element: HTMLElement,\r\n    className: string,\r\n    display = 'block'\r\n) {\r\n    return fadeIn<AnimationEvent>('animation', element, className, display);\r\n}\r\n\r\nexport function transitOut(\r\n    element: HTMLElement,\r\n    className: string,\r\n    remove?: boolean\r\n) {\r\n    return fadeOut<TransitionEvent>('transition', element, className, remove);\r\n}\r\n\r\nexport function animateOut(\r\n    element: HTMLElement,\r\n    className: string,\r\n    remove?: boolean\r\n) {\r\n    return fadeOut<AnimationEvent>('animation', element, className, remove);\r\n}\r\n","import { watchMotion, durationOf } from 'web-utility/source/animation';\nimport { parseURLData } from 'web-utility/source/URL';\n\nexport function watchStop(element: HTMLElement) {\n    return watchMotion(\n        durationOf('transition', element) ? 'transition' : 'animation',\n        element\n    );\n}\n\nexport function parsePath(raw: string) {\n    const [path, data] = raw.split('?');\n\n    return data ? { ...parseURLData(data), path } : { path };\n}\n","import {\n    Props,\n    Component,\n    Context,\n    createElement,\n    Child,\n    Children\n} from '@bikeshaving/crank';\nimport { HTMLProps } from 'web-utility/source/DOM-type';\n\nimport { PathMode, History } from './History';\nimport { parsePath, watchStop } from './utility';\n\nexport interface PageProps extends Props {\n    path: string;\n    history: History;\n}\n\nexport type PageComponent = (props: PageProps) => ReturnType<Component>;\n\nexport interface Route {\n    path: string | RegExp;\n    component?: PageComponent;\n    resolver?: () => Promise<PageComponent>;\n}\n\nexport interface RouterProps extends HTMLProps, Props {\n    mode?: PathMode;\n    map: Route[];\n    startClass?: string;\n    endClass?: string;\n    spinner?: Children;\n}\n\nexport async function* Router(\n    this: Context,\n    {\n        mode,\n        map,\n        className,\n        children,\n        spinner,\n        startClass,\n        endClass\n    }: RouterProps\n): AsyncGenerator<Child, any, HTMLElement> {\n    const root = yield <div className={className} />;\n\n    const history = new History(mode).listen(root);\n\n    var last: { path: string; component: PageComponent } | undefined;\n\n    map.sort(({ path: A }, { path: B }) => (B + '').localeCompare(A + ''));\n\n    for await (const {\n        data,\n        defer: { resolve }\n    } of history.stream.observable) {\n        const item = map.find(({ path }) =>\n            typeof path === 'string' ? data.startsWith(path) : path.test(data)\n        );\n\n        if (!item) {\n            yield <div className={className}>{children}</div>;\n            resolve();\n            continue;\n        }\n\n        const lastTree = last && (\n            <last.component {...parsePath(last.path)} history={history} />\n        );\n\n        if (!item.component) {\n            if (spinner)\n                yield (\n                    <div className={className}>\n                        {lastTree && (\n                            <div crank-key={last.path}>{lastTree}</div>\n                        )}\n                        {spinner}\n                    </div>\n                );\n            item.component = await item.resolver();\n        }\n\n        const nextTree = (\n            <item.component {...parsePath(data)} history={history} />\n        );\n\n        if (last && startClass && endClass) {\n            const [startCSS, endCSS] =\n                history.compare(last.path, data) < 0\n                    ? [startClass, endClass]\n                    : [endClass, startClass];\n\n            const {\n                firstElementChild: lastPage,\n                lastElementChild: nextPage\n            } = yield (\n                <div className={className}>\n                    <div crank-key={last.path} className={endCSS}>\n                        {lastTree}\n                    </div>\n                    <div crank-key={data} className={startCSS}>\n                        {nextTree}\n                    </div>\n                </div>\n            );\n            const lastEnd = watchStop(lastPage as HTMLElement),\n                nextEnd = watchStop(nextPage as HTMLElement);\n\n            yield (\n                <div className={className}>\n                    <div crank-key={last.path} className={endCSS}>\n                        {lastTree}\n                    </div>\n                    <div crank-key={data}>{nextTree}</div>\n                </div>\n            );\n            await Promise.all([lastEnd, nextEnd]);\n        }\n\n        yield (\n            <div className={className}>\n                <div crank-key={data}>{nextTree}</div>\n            </div>\n        );\n        last = { path: data, component: item.component };\n        resolve();\n    }\n}\n","export * from './History';\nexport * from './Router';\nexport * from './utility';\n","/* @jsx createElement */\nimport { createElement, Fragment } from '@bikeshaving/crank';\nimport { PageProps } from '../../source';\n\nconst Color = {\n    test: 'lightblue',\n    example: 'pink',\n    sample: 'wheat'\n};\n\nexport function Page({ path, history, ...data }: PageProps) {\n    return (\n        <Fragment>\n            <nav>\n                <a href=\"test?id=1\">Test</a>\n                <a href=\"example?id=2\">Example</a>\n                <a href=\"sample?id=3\">Sample</a>\n            </nav>\n            <ul style={{ background: Color[path] }}>\n                <li>path: {path}</li>\n                <li>data: {JSON.stringify(data)}</li>\n            </ul>\n        </Fragment>\n    );\n}\n","/* @jsx createElement */\nimport { createElement } from '@bikeshaving/crank';\nimport { renderer } from '@bikeshaving/crank/dom';\nimport { Router } from '../../source';\n\nimport { Page } from './Page';\n\nwindow.onload = () =>\n    renderer.render(\n        <Router\n            className=\"router\"\n            startClass=\"start\"\n            endClass=\"end\"\n            map={[\n                { path: '', component: Page },\n                { path: 'test', component: Page },\n                { path: /Example/i, component: Page },\n                {\n                    path: 'sample',\n                    resolver: () =>\n                        new Promise(resolve =>\n                            setTimeout(() => resolve(Page), 500)\n                        )\n                }\n            ]}\n            spinner={<div className=\"spinner\">loading...</div>}\n        />,\n        document.body\n    );\n"]}